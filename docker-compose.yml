version: "3"
services:
  frontend:
    container_name: website
    build: ./Frontend/website
    stdin_open: true
    tty: true
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./Frontend/website/src:/app/src
    networks:
      backend:
        ipv4_address: 172.28.0.9
    depends_on:
      - "dns"

  dns:
    container_name: dns
    build: ./Backend/DNS
    expose:
      - 80
    ports:
      - 8002:80
    volumes:
      - ./Backend/DNS/nginx.conf:/etc/nginx/nginx.conf 
    networks:
      backend:
        ipv4_address: 172.28.0.2
    depends_on:
      - "lb1"
      - "lb2"

  lb1:
    container_name: lb1
    build: ./Backend/Load Balancer
    ports:
      - 8003:80
    expose:
      - 80
    networks:
      backend:
        ipv4_address: 172.28.0.3
    depends_on:
      - "server1"
      - "server2"
      - "server3"
      
  lb2:
    container_name: lb2
    build: ./Backend/Load Balancer
    ports:
      - 8004:80
    expose:
      - 80
    networks:
      backend:
        ipv4_address: 172.28.0.4
    depends_on:
      - "server1"
      - "server2"
      - "server3"

  server1:
    container_name: server1
    build: ./Backend/Server
    environment:
      - NODE_ENV=production
      - PORT=80
      - NAME=server1
    volumes:
      - ./Backend/Server:/home/node/app
    ports:
      - "8005:80"
    expose:
      - 80
    depends_on:
      - "db"
    networks:
      backend:
        ipv4_address: 172.28.0.5
    command: "npm start"

  server2:
    container_name: server2
    build: ./Backend/Server
    environment:
      - NODE_ENV=production
      - PORT=80
      - NAME=server2
    volumes:
      - ./Backend/Server:/home/node/app
    networks:
      backend:
        ipv4_address: 172.28.0.6
    ports:
      - "8006:80"
   
    depends_on:
      - "db"
    expose:
      - 80
    command: "npm start"

  server3:
    container_name: server3
    build: ./Backend/Server
    environment:
      - NODE_ENV=production
      - PORT=80
      - NAME=server3 
    volumes:
      - ./Backend/Server:/home/node/app
    ports:
      - "8007:80"
    expose:
      - 80
   
    command: "npm start"
    depends_on:
      - "db"
    networks:
      backend:
        ipv4_address: 172.28.0.7
  
  python_server:
    container_name: python_server
    build: ./Backend/PythonServer
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./Backend/PythonServer:/code
    ports:
      - 8000:8000
    expose:
      - 8000
    depends_on:
      - "db"
    networks:
      backend:
        ipv4_address: 172.28.0.15
        
  db:
    container_name: mysql
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: users
      MYSQL_USER: Saar
      MYSQL_PASSWORD: Password
    volumes:
        - type: bind
          source: ./Backend/MySQL
          target: /var/lib/mysql
    ports:
      - 6033:3306
    networks:
      backend:
        ipv4_address: 172.28.0.8
        
  graphite:
    container_name: graphite
    image: graphiteapp/graphite-statsd
    ports:
      - "81:80"
      - "2003-2004:2003-2004"
      - "2023-2024:2023-2024"
      - "8125:8125/udp"
      - "8126:8126"
    depends_on:
      - "server1"
      - "server2"
      - "server3"
    volumes:
      - ./Backend/Metrics/graphite/configs:/opt/graphite/conf
      - ./Backend/Metrics/graphite/data:/opt/graphite/storage
      - ./Backend/Metrics/logrotate:/etc/logrotate.d
    networks:
      backend:
        ipv4_address: 172.28.0.10

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
       - ./Backend/Metrics/grafana/data:/var/lib/grafana
       - ./Backend/Metrics/grafana/logs:/var/log/grafana
       - ./Backend/Metrics/grafana/data/provisioning:/etc/grafana/provisioning
    ports:
     - "80:3000"
    depends_on:
      - "graphite"
    networks:
      backend:
        ipv4_address: 172.28.0.14

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      backend:
        ipv4_address: 172.28.0.11

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.16.3
    ports:
      - '5601:5601'
    networks:
      backend:
        ipv4_address: 172.28.0.12

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.16.3
    ports:
      - '5000:5000'
    volumes:
      - type: bind
        source: ./Backend/Logstash/logstash_pipeline/
        target: /usr/share/logstash/pipeline
        read_only: true
    networks:
      backend:
        ipv4_address: 172.28.0.13
        
networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
