version: "3"
services:
  frontend:
    container_name: website
    build: ./Frontend/website
    stdin_open: true
    tty: true
    expose:
      - 3000
    ports:
      - "3000:3000"
    volumes:
      - ./Frontend/website/src:/app/src
    networks:
      backend:
        ipv4_address: 172.28.0.9
    depends_on:
      - "dns"

  dns:
    container_name: dns
    build: ./Backend/DNS
    expose:
      - 80
    ports:
      - 8002:80
    volumes:
      - ./Backend/DNS/nginx.conf:/etc/nginx/nginx.conf 
    networks:
      backend:
        ipv4_address: 172.28.0.2
    depends_on:
      - "lb1"
      - "lb2"

  lb1:
    container_name: lb1
    build: ./Backend/Load Balancer
    ports:
      - 8003:80
    expose:
      - 80
    networks:
      backend:
        ipv4_address: 172.28.0.3
    depends_on:
      - "server1"
      - "server2"
      - "server3"
      
  lb2:
    container_name: lb2
    build: ./Backend/Load Balancer
  
    ports:
      - 8004:80
    expose:
      - 80
    networks:
      backend:
        ipv4_address: 172.28.0.4
    depends_on:
      - "server1"
      - "server2"
      - "server3"

  server1:
    container_name: server1
    build: ./Backend/Server
    environment:
      - NODE_ENV=production
      - PORT=80
    volumes:
      - ./Backend/Server:/home/node/app
    ports:
      - "8005:80"
    links:
      - statsd:statsd
    expose:
      - 80
    depends_on:
      - "db"
    networks:
      backend:
        ipv4_address: 172.28.0.5
    command: "npm start"

  server2:
    container_name: server2
    build: ./Backend/Server
    environment:
      - NODE_ENV=production
      - PORT=80
    volumes:
      - ./Backend/Server:/home/node/app
    networks:
      backend:
        ipv4_address: 172.28.0.6
    ports:
      - "8006:80"
    links:
      - statsd:statsd
    depends_on:
      - "db"
    expose:
      - 80
    command: "npm start"

  server3:
    container_name: server3
    build: ./Backend/Server
    environment:
      - NODE_ENV=production
      - PORT=80
    volumes:
      - ./Backend/Server:/home/node/app
    ports:
      - "8007:80"
    expose:
      - 80
    links:
      - statsd:statsd
    command: "npm start"
    depends_on:
      - "db"
    networks:
      backend:
        ipv4_address: 172.28.0.7
  
  db:
    container_name: mysql
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: users
      MYSQL_USER: Saar
      MYSQL_PASSWORD: Password
    volumes:
        - type: bind
          source: ./Backend/MySQL
          target: /var/lib/mysql
    ports:
      - 6033:3306
    links:
      - statsd:statsd
    networks:
      backend:
        ipv4_address: 172.28.0.8
        
  metrics:
    container_name: metrics
    image: hopsoft/graphite-statsd
    ports:
      - "80:80"
      - "81:81"
      - "2003-2004:2003-2004"
      - "2023-2024:2023-2024"
      - "8125:8125/udp"
      - "8126:8126"
    depends_on:
      - "server1"
      - "server2"
      - "server3"
    networks:
      backend:
        ipv4_address: 172.28.0.10

  logstach:
    container_name: logstach
    image: docker.elastic.co/logstash/logstash:7.15.2
    ports:
      - 9200:9200
    depends_on:
      - "server1"
      - "server2"
      - "server3"
    
    networks:
      backend:
        ipv4_address: 172.28.0.11

#  logger:
#    container_name: logger
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
#    ports:
#      - 9200:9200
#      - 9300:9300
#    environment:
#      - discovery.type=single-node
#    depends_on:
#      - "server1"
#      - "server2"
#      - "server3"
#    networks:
#      backend:
#        ipv4_address: 172.28.0.11

#  kibana:
#    image: kibana:7.4.1
#    links: 
#      - logger
#    ports:
#      - 5601:5901
#    depends_on:
#      - "logger"
#    networks:
#      backend:
#        ipv4_address: 172.28.0.12



networks:
  backend:
    ipam:
      config:
        - subnet: 172.28.0.0/16
